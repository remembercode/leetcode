// force

class Solution {
    public int[] twoSum(int[] nums, int target) {        
        int first_p = 0;
        int second_p = 0;
        int[] result = new int[2];
        for(first_p = 0; first_p < nums.length ; first_p = first_p + 1)
        {
            second_p = first_p + 1;
            while (second_p < nums.length)
            {
                if (nums[first_p] + nums[second_p] == target)
                {

                    result[0] = first_p;
                    result[1] = second_p;                  
                }
                second_p = second_p + 1;
            }                     
        }
        return result;          
    }
}

// hashmap fail

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> Diff = new HashMap<Integer, Integer>();
        
        int first_p = 0;
        int second_p = 0;
        int[] result = new int[2];
        for(first_p = 0; first_p < nums.length ; first_p = first_p + 1)
        {
            int diff_ = target - nums[first_p];
            int has = -1;
            try
            {
                has = Diff.get(diff_);

            }catch(Exception e1)
            {
               has = -1;
            }
            if (has >= 0) 
            {
                result[0] = has;
                result[1] = diff_;
                break;
            }
            Diff.put(diff_, nums[first_p]);          
        }
        return result;          
    }
}
